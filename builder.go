package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"text/template"
	"time"
)

type JeneInterface interface {
	Open(filename string, pkg string) error
	Close() error
	SliceNewWithContent(label, kind string, content interface{})
	Write(content []byte)
}

type JeneBuilder struct {
	f       *os.File
	pkg     string
	current int64
}

func (jene *JeneBuilder) Open(filename string, pkg string) error {
	var err error

	// Before creating file. Check if file already exists . If file does not exist create file set the package name.
	_, err = os.Stat(filename)
	if os.IsNotExist(err) {
		log.Printf("File does not exist")
		jene.f.WriteAt([]byte(`This file was generated by jen. PLEASE DO NOT EDIT.
package trying`), jene.current)
	}

	jene.f, err = os.OpenFile(filename, os.O_RDWR|os.O_CREATE, 0755)
	if err != nil {
		log.Printf("Could not open file %v", err.Error())
		return err
	}

	return nil
}

func (jene *JeneBuilder) Close() error {
	if err := jene.f.Close(); err != nil {
		log.Printf("Could not close file %v", err.Error())
		return err
	}
	return nil
}

func (jene *JeneBuilder) SliceNewWithContent(label, kind string, content interface{}) {
	jene.Open("trying.go", "trying")
	defer jene.Close()
	var parseString string
	switch kind {
	case "int":
		parseString = fmt.Sprintf(`var %s = []%s{
{{- range $el := .Values }}
	{{ $el }},
{{- end}}
}`, label, kind)

	case "string":
		parseString = fmt.Sprintf(`var %s = []%s{
{{- range $el := .Values }}
	"{{ $el }}",
	{{- end}}
}`, label, kind)
	}

	templ := template.Must(template.New("").Parse(parseString))

	buf := &bytes.Buffer{}
	templ.Execute(buf, struct {
		Timestamp time.Time
		URL       string
		Values    interface{}
	}{
		Timestamp: time.Now(),
		URL:       "here/home",
		Values:    content,
	})

	info := buf.Bytes()
	jene.Write(info)

	log.Printf("THE BUFFER %v", string(info))
}

func (jene *JeneBuilder) Write(content []byte) {
	content = append(content, []byte("\n\n")...)
	len, err := jene.f.WriteAt(content, jene.current)
	if err != nil {
		log.Printf("Could not write to file")
	}

	jene.current += int64(len)
	log.Printf("Wrote %v bytes to file", len)
}
